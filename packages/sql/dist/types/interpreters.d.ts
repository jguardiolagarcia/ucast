import { Condition, CompoundCondition, FieldCondition, Comparable } from '@ucast/core';
import { SqlOperator } from './interpreter';
export declare const eq: SqlOperator<FieldCondition>;
export declare const ne: typeof eq;
export declare const lt: SqlOperator<FieldCondition<Comparable>>;
export declare const lte: SqlOperator<FieldCondition<Comparable>>;
export declare const gt: SqlOperator<FieldCondition<Comparable>>;
export declare const gte: SqlOperator<FieldCondition<Comparable>>;
export declare const exists: SqlOperator<FieldCondition<Comparable>>;
export declare const within: SqlOperator<FieldCondition<unknown[]>>;
export declare const nin: SqlOperator<FieldCondition<unknown[]>>;
export declare const mod: SqlOperator<FieldCondition<[number, number]>>;
type IElemMatch = SqlOperator<FieldCondition<Condition>>;
export declare const elemMatch: IElemMatch;
export declare const regex: SqlOperator<FieldCondition<RegExp>>;
export declare const not: SqlOperator<CompoundCondition<Condition<unknown>>>;
export declare const and: SqlOperator<CompoundCondition<Condition<unknown>>>;
export declare const or: SqlOperator<CompoundCondition<Condition<unknown>>>;
export declare const nor: SqlOperator<CompoundCondition<Condition<unknown>>>;
export {};
