{"version":3,"file":"typeorm.mjs","sources":["../../../src/lib/typeorm.ts"],"sourcesContent":["import { Condition } from '@ucast/core';\nimport { ObjectLiteral, SelectQueryBuilder } from 'typeorm';\nimport {\n  createSqlInterpreter,\n  allInterpreters,\n  SqlOperator,\n  createDialects\n} from '../index';\n\nfunction joinRelation<Entity extends ObjectLiteral>(\n  relationName: string,\n  query: SelectQueryBuilder<Entity>,\n) {\n  const meta = query.expressionMap.mainAlias!.metadata;\n  const relation = meta.findRelationWithPropertyPath(relationName);\n\n  if (relation) {\n    query.innerJoin(`${query.alias}.${relationName}`, relationName);\n    return true;\n  }\n\n  return false;\n}\n\nconst typeormPlaceholder = (index: number) => `:${index - 1}`;\n\nconst dialects = createDialects({\n  joinRelation,\n  paramPlaceholder: typeormPlaceholder,\n});\n\n \ndialects.sqlite.escapeField = dialects.sqlite3.escapeField = dialects.pg.escapeField;\n\nexport function createInterpreter(interpreters: Record<string, SqlOperator<any>>) {\n  const interpretSQL = createSqlInterpreter(interpreters);\n\n  return <Entity extends ObjectLiteral>(\n    condition: Condition,\n    query: SelectQueryBuilder<Entity>,\n  ) => {\n    const connection = query.connection;\n    const dialect = connection.options.type as keyof typeof dialects;\n    const options = { ...dialects[dialect], rootAlias: query.alias };\n\n    if (!options) {\n      throw new Error(`Unsupported database dialect: ${dialect}`);\n    }\n\n    const [sql, params] = interpretSQL(condition, options, query);\n    return query.where(sql, params);\n  };\n}\n\nexport const interpret = createInterpreter(allInterpreters);\n"],"names":["joinRelation","relationName","query","meta","expressionMap","mainAlias","metadata","relation","findRelationWithPropertyPath","innerJoin","alias","typeormPlaceholder","index","dialects","createDialects","paramPlaceholder","sqlite","escapeField","sqlite3","pg","createInterpreter","interpreters","interpretSQL","createSqlInterpreter","condition","connection","dialect","options","type","rootAlias","Error","sql","params","where","interpret","allInterpreters"],"mappings":";;AASA,SAASA,YAAT,CACEC,YADF,EAEEC,KAFF,EAGE;AACA,QAAMC,IAAI,GAAGD,KAAK,CAACE,aAAN,CAAoBC,SAApB,CAA+BC,QAA5C;AACA,QAAMC,QAAQ,GAAGJ,IAAI,CAACK,4BAAL,CAAkCP,YAAlC,CAAjB;;AAEA,MAAIM,QAAJ,EAAc;AACZL,IAAAA,KAAK,CAACO,SAAN,CAAiB,GAAEP,KAAK,CAACQ,KAAM,IAAGT,YAAa,EAA/C,EAAkDA,YAAlD;AACA,WAAO,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED,MAAMU,kBAAkB,GAAIC,KAAD,IAAoB,IAAGA,KAAK,GAAG,CAAE,EAA5D;;AAEA,MAAMC,QAAQ,GAAGC,cAAc,CAAC;AAC9Bd,EAAAA,YAD8B;AAE9Be,EAAAA,gBAAgB,EAAEJ;AAFY,CAAD,CAA/B;AAMAE,QAAQ,CAACG,MAAT,CAAgBC,WAAhB,GAA8BJ,QAAQ,CAACK,OAAT,CAAiBD,WAAjB,GAA+BJ,QAAQ,CAACM,EAAT,CAAYF,WAAzE;AAEO,SAASG,iBAAT,CAA2BC,YAA3B,EAA2E;AAChF,QAAMC,YAAY,GAAGC,oBAAoB,CAACF,YAAD,CAAzC;AAEA,SAAO,CACLG,SADK,EAELtB,KAFK,KAGF;AACH,UAAMuB,UAAU,GAAGvB,KAAK,CAACuB,UAAzB;AACA,UAAMC,OAAO,GAAGD,UAAU,CAACE,OAAX,CAAmBC,IAAnC;AACA,UAAMD,OAAO,qBAAQd,QAAQ,CAACa,OAAD,CAAhB;AAA2BG,MAAAA,SAAS,EAAE3B,KAAK,CAACQ;AAA5C,MAAb;;AAEA,QAAI,CAACiB,OAAL,EAAc;AACZ,YAAM,IAAIG,KAAJ,CAAW,iCAAgCJ,OAAQ,EAAnD,CAAN;AACD;;AAED,UAAM,CAACK,GAAD,EAAMC,MAAN,IAAgBV,YAAY,CAACE,SAAD,EAAYG,OAAZ,EAAqBzB,KAArB,CAAlC;AACA,WAAOA,KAAK,CAAC+B,KAAN,CAAYF,GAAZ,EAAiBC,MAAjB,CAAP;AACD,GAdD;AAeD;MAEYE,SAAS,GAAGd,iBAAiB,CAACe,eAAD;;;;"}