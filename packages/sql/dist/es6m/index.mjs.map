{"version":3,"file":"index.mjs","sources":["../../src/interpreters.ts","../../src/interpreter.ts","../../src/defaults.ts","../../src/dialects.ts"],"sourcesContent":["import {\n  Condition,\n  CompoundCondition,\n  FieldCondition,\n  Comparable\n} from '@ucast/core';\nimport { SqlOperator } from './interpreter';\n\nexport const eq: SqlOperator<FieldCondition> = (condition, query) => {\n  return query.where(condition.field, '=', condition.value);\n};\n\nexport const ne: typeof eq = (condition, query) => {\n  return query.where(condition.field, '<>', condition.value);\n};\n\nexport const lt: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '<', condition.value);\n};\n\nexport const lte: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '<=', condition.value);\n};\n\nexport const gt: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '>', condition.value);\n};\n\nexport const gte: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.where(condition.field, '>=', condition.value);\n};\n\nexport const exists: SqlOperator<FieldCondition<Comparable>> = (condition, query) => {\n  return query.whereRaw(`${query.field(condition.field)} is ${condition.value ? 'not ' : ''}null`);\n};\n\nfunction manyParamsOperator(name: string): SqlOperator<FieldCondition<unknown[]>> {\n  return (condition, query) => {\n    return query.whereRaw(\n      `${query.field(condition.field)} ${name}(${query.manyParams(condition.value).join(', ')})`,\n      ...condition.value\n    );\n  };\n}\n\nexport const within = manyParamsOperator('in');\nexport const nin = manyParamsOperator('not in');\n\nexport const mod: SqlOperator<FieldCondition<[number, number]>> = (condition, query) => {\n  const params = query.manyParams(condition.value);\n  const sql = `mod(${query.field(condition.field)}, ${params[0]}) = ${params[1]}`;\n  return query.whereRaw(sql, ...condition.value);\n};\n\ntype IElemMatch = SqlOperator<FieldCondition<Condition>>;\nexport const elemMatch: IElemMatch = (condition, query, { interpret }) => {\n  return query.usingFieldPrefix(condition.field, () => interpret(condition.value, query));\n};\n\nexport const regex: SqlOperator<FieldCondition<RegExp>> = (condition, query) => {\n  const sql = query.options.regexp(\n    query.field(condition.field),\n    query.param(),\n    condition.value.ignoreCase\n  );\n  return query.whereRaw(sql, condition.value.source);\n};\n\nfunction compoundOperator(combinator: 'and' | 'or', isInverted = false) {\n  return ((node, query, { interpret }) => {\n    const childQuery = query.child();\n    node.value.forEach(condition => interpret(condition, childQuery));\n    return query.merge(childQuery, combinator, isInverted);\n  }) as SqlOperator<CompoundCondition>;\n}\n\nexport const not = compoundOperator('and', true);\nexport const and = compoundOperator('and');\nexport const or = compoundOperator('or');\nexport const nor = compoundOperator('or', true);\n","import {\n  createInterpreter,\n  Condition,\n  InterpretationContext\n} from '@ucast/core';\nimport { DialectOptions } from './dialects';\n\nexport interface SqlQueryOptions extends Required<DialectOptions> {\n  rootAlias?: string\n}\n\nexport class Query {\n  public readonly options!: SqlQueryOptions;\n  private _fieldPrefix!: string;\n  private _params: unknown[] = [];\n  private _sql: string[] = [];\n  private _joins: string[] = [];\n  private _lastPlaceholderIndex = 1;\n  private _targetQuery!: unknown;\n  private _rootAlias!: string;\n\n  constructor(options: SqlQueryOptions, fieldPrefix = '', targetQuery?: unknown) {\n    this.options = options;\n    this._fieldPrefix = fieldPrefix;\n    this._targetQuery = targetQuery;\n    this._rootAlias = options.rootAlias ? `${options.escapeField(options.rootAlias)}.` : '';\n  }\n\n  field(rawName: string) {\n    const name = this._fieldPrefix + rawName;\n    const relationNameIndex = name.indexOf('.');\n\n    if (relationNameIndex === -1) {\n      return this._rootAlias + this.options.escapeField(name);\n    }\n\n    const relationName = name.slice(0, relationNameIndex);\n    const field = name.slice(relationNameIndex + 1);\n\n    if (!this.options.joinRelation(relationName, this._targetQuery)) {\n      return this.options.escapeField(field);\n    }\n\n    this._joins.push(relationName);\n    return `${this.options.escapeField(relationName)}.${this.options.escapeField(field)}`;\n  }\n\n  param() {\n    return this.options.paramPlaceholder(this._lastPlaceholderIndex + this._params.length);\n  }\n\n  manyParams(items: unknown[]) {\n    const startIndex = this._lastPlaceholderIndex + this._params.length;\n    return items.map((_, i) => this.options.paramPlaceholder(startIndex + i));\n  }\n\n  child() {\n    const query = new Query(this.options, this._fieldPrefix, this._targetQuery);\n    query._lastPlaceholderIndex = this._lastPlaceholderIndex + this._params.length;\n    return query;\n  }\n\n  where(field: string, operator: string, value?: unknown) {\n    const sql = `${this.field(field)} ${operator} ${this.param()}`;\n    return this.whereRaw(sql, value);\n  }\n\n  whereRaw(sql: string, ...values: unknown[]) {\n    this._sql.push(sql);\n\n    if (values) {\n      this._params.push(...values);\n    }\n\n    return this;\n  }\n\n  merge(query: Query, operator: 'and' | 'or' = 'and', isInverted = false) {\n    let sql = query._sql.join(` ${operator} `);\n\n    if (sql[0] !== '(') {\n      sql = `(${sql})`;\n    }\n\n    this._sql.push(`${isInverted ? 'not ' : ''}${sql}`);\n    this._params.push(...query._params);\n    return this;\n  }\n\n  usingFieldPrefix(prefix: string, callback: () => void) {\n    const prevPrefix = this._fieldPrefix;\n\n    try {\n      this._fieldPrefix = `${prefix}.`;\n      callback();\n      return this;\n    } finally {\n      this._fieldPrefix = prevPrefix;\n    }\n  }\n\n  toJSON(): [string, unknown[], string[]] {\n    return [this._sql.join(' and '), this._params, this._joins];\n  }\n}\n\nexport type SqlOperator<C extends Condition> = (\n  condition: C,\n  query: Query,\n  context: InterpretationContext<SqlOperator<C>>,\n) => Query;\n\nexport function createSqlInterpreter(operators: Record<string, SqlOperator<any>>) {\n  const interpret = createInterpreter<SqlOperator<any>>(operators);\n  return (condition: Condition, options: SqlQueryOptions, targetQuery?: unknown) => {\n    return interpret(condition, new Query(options, '', targetQuery)).toJSON();\n  };\n}\n","import * as interpreters from './interpreters';\n\nexport const allInterpreters = {\n  ...interpreters,\n  in: interpreters.within,\n};\n","function posixRegex(field: string, placeholder: string, ignoreCase: boolean) {\n  const operator = ignoreCase ? '~*' : '~';\n  return `${field} ${operator} ${placeholder}`;\n}\n\nfunction regexp(field: string, placeholder: string) {\n  return `${field} regexp ${placeholder} = 1`;\n}\n\nconst questionPlaceholder = () => '?';\nconst $indexPlaceholder = (index: number) => `$${index}`;\n\nexport const oracle = {\n  regexp: posixRegex,\n  paramPlaceholder: $indexPlaceholder,\n  escapeField: (field: string) => `\"${field}\"`,\n};\nexport const pg = oracle;\n\nexport const mysql = {\n  regexp,\n  paramPlaceholder: questionPlaceholder,\n  escapeField: (field: string) => `\\`${field}\\``,\n};\nexport const sqlite = mysql;\n\nexport const mssql = {\n  regexp() {\n    throw new Error('\"regexp\" operator is not supported in MSSQL');\n  },\n  paramPlaceholder: questionPlaceholder,\n  escapeField: (field: string) => `[${field}]`,\n};\n\nexport interface DialectOptions {\n  regexp(field: string, placeholder: string, ignoreCase: boolean): string\n  joinRelation?(relationName: string, context: unknown): boolean\n  escapeField(field: string): string\n  paramPlaceholder(index: number): string\n}\n\nexport type SupportedDialects = 'mssql' |\n'postgres' |\n'pg' |\n'oracle' |\n'oracledb' |\n'mysql' |\n'mysql2' |\n'mariadb' |\n'sqlite3' |\n'sqlite';\ntype Dialects<V> = Record<SupportedDialects, DialectOptions & V>;\n\nexport function createDialects<T extends Partial<DialectOptions>>(options: T): Dialects<T> {\n  const mssqlOptions = {\n    ...mssql,\n    ...options,\n  };\n  const pgOptions = {\n    ...pg,\n    ...options,\n  };\n  const oracleOptions = {\n    ...oracle,\n    ...options,\n  };\n  const mysqlOptions = {\n    ...mysql,\n    ...options,\n  };\n  const sqliteOptions = {\n    ...sqlite,\n    ...options,\n  };\n\n  return {\n    mssql: mssqlOptions,\n    oracle: oracleOptions,\n    oracledb: oracleOptions,\n    pg: pgOptions,\n    postgres: pgOptions,\n    mysql: mysqlOptions,\n    mysql2: mysqlOptions,\n    mariadb: mysqlOptions,\n    sqlite: sqliteOptions,\n    sqlite3: sqliteOptions,\n  };\n}\n"],"names":["eq","condition","query","where","field","value","ne","lt","lte","gt","gte","exists","whereRaw","manyParamsOperator","name","manyParams","join","within","nin","mod","params","sql","elemMatch","interpret","usingFieldPrefix","regex","options","regexp","param","ignoreCase","source","compoundOperator","combinator","isInverted","node","childQuery","child","forEach","merge","not","and","or","nor","Query","constructor","fieldPrefix","targetQuery","_params","_sql","_joins","_lastPlaceholderIndex","_fieldPrefix","_targetQuery","_rootAlias","rootAlias","escapeField","rawName","relationNameIndex","indexOf","relationName","slice","joinRelation","push","paramPlaceholder","length","items","startIndex","map","_","i","operator","values","prefix","callback","prevPrefix","toJSON","createSqlInterpreter","operators","createInterpreter","allInterpreters","interpreters","in","posixRegex","placeholder","questionPlaceholder","$indexPlaceholder","index","oracle","pg","mysql","sqlite","mssql","Error","createDialects","mssqlOptions","pgOptions","oracleOptions","mysqlOptions","sqliteOptions","oracledb","postgres","mysql2","mariadb","sqlite3"],"mappings":"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"}